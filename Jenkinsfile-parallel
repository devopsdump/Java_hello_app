pipeline {
    agent none
parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'fe/dev', description: 'Specify the branch name to deploy')
    }
    stages {
        stage('Build and run') {
          parallel {
            stage('Development-Pipeline') {
              agent {label 'dev-slave-agent'}
              stages{
                stage('GIT CHECKOUT'){
            steps {
                script {
                    // Checkout the specified branch
                    def branchName = params.BRANCH_NAME
                    checkout([$class: 'GitSCM', branches: [[name: branchName]], userRemoteConfigs: [[url: 'https://github.com/devopsdump/Java_hello_app.git']]])
                }
            }
         }
               stage("Compile") {
            steps {
                sh "mvn clean compile"
            }
        }
stage("Build") {
            steps {
                sh "mvn clean install"
 		sh "mv target/hello-1.0.war target/boxfuse-sample-java-war-hello.war"
            }
        }
		stage("Deploy to Dev") {
            when {
                expression { params.BRANCH_NAME == 'fe/dev' }
            }
            steps {
                deployToTomcat('3.81.133.103', 'tomcat', 'tomcat', 'http://3.81.133.103:8080/manager/text', '/boxfuse-sample-java-war-hello', 'Dev')
            }
        }
stage("Deploy to QA") {
            when {
                expression { params.BRANCH_NAME == 'fe/dev' }
            }
            steps {
 		deployToTomcat('54.237.237.207', 'tomcat', 'tomcat', 'http://54.237.237.207:8080/manager/text', '/boxfuse-sample-java-war-hello', 'QA')
            }
        }
	       }
              }
            stage('QA-pipeline') {
              agent {label 'qa-slave-agent'}
              stages{
                stage("Testing") {
            steps {
                echo "Test Runs"
            
            }
        }
                
               }
              }
             }
            }
           }
          }
		  def deployToTomcat(tomcatIP, username, password, tomcatURL, contextPath, environment) {
    def warFileName = 'target/boxfuse-sample-java-war-hello.war'

    // Deploy the WAR file using curl
    sh """
        curl -v -u ${username}:${password} --upload-file ${warFileName} ${tomcatURL}/deploy?path=${contextPath}&update=true
    """
    echo "Deployment to ${environment} server completed."
}
